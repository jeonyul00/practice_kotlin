프로젝트 디렉토리
module : 한 번에 컴파일되는 묶음
    src :
        main :
            project :
                package :



---
val : 변수의 자료형 : 재할당 금지(상수)
var : 변수의 자료형 : 재할당 가능
'' : Char : 문자
"" : String : 문자열
fun : 함수선언
    선언 방식 1.
    fun ex(x:Int):Int{
        return x * 2
    }

    선언 방식2.
    fun ex(x:Int): Int = x * 2

Class : 객체를 정의 : 대문자로 시작
constrictor : 생성자 : 하나만 있을시 기본 생성자로 매개변수 생략가능
인스턴스 : 붕어빵... : 클래스로 만든 객체
최상위 클래스 : Any => 상속 받을 수 있겠군
    Any클래스의 오버로딩 가능한 함수 => equals(), hashCode(), toString()
    그럼 클래스 만들때마다 오버라이딩 해야하는가? => ㄴㄴ class 선언할때 앞에 data 키워드 붙이면 됨 : data class : 데이터를 담는 용도의 클래스
open class로 선언한 클래스만 상속 가능
abstract class : 추상클래스 : 인스턴스화 불가, 함수 바디없음 : 서브 클래스에서 정의
interface : 프로퍼티 정의가능, 할당 불가능, 본문이 있는 함수도 정의 가능, 상속 개수 제한 없음
overriding : 서브클래스에서 탑클래스(open)의 함수를 재정의하는것 : 변수도 가능
    open class TopClass{
        open val exValue:Int = 0;
    }

    class bottomClass:TopClass() {
        override var exexValue:Int = 1;
    }

    주의 : val => var 가능, var => val 불가능

Collections : 동일한 타입의 여러 데이터 집합
    List : 순서를 가진 콜렉션, 인덱스로 원소에 접근 가능
        listOf(1,2,2) // [1,2,2]
    Set : 유니크한 원소를 가진 콜렉션
        setOf(1,2,2) // [1,2]
    Map : key-value 쌍으로 원소로 관리, 동일한 키에 대해서는 하나의 값만 가짐

    List, Set, Map은 read-only만 가능한 이뮤터블타입 : 생성 시 추가한 값을 수정할 수 없다

    MutableList, MutableSet, MutableList는 이뮤터블 타입으로 수정 가능

    주요 연산기능
        Retrive : 데이터의 위치 정보 조회
        Transformation : 데이터 반환값을 변경
        Filtering : 데이터를 필터링하는 기준을 세우고 그에 맞게 분류
        Groping : 데이터를 그룹화 할 수 있는 값을 키로 받는 Map타입

object : 객체 선언 키워드 : 프로젝트 전역에서 단일 객체로 사용됨 => 싱글톤 패턴 쓸 때 좋을 듯

    선언 방법 1
    val exObj = onject{
        val product = mutableListOf("전자기기", "아이폰")
        override fun toString() = products.toString()
    }

    선언 방법 2
    interface exInterface{
        fun absFun(view:View)
    }

    val exValue = object:exInterface{
        override funabsFun(view:View){
            ...
        }
    }

companion object : 클래스 내부에서 쓰이며, 생성자를 제공하는 경우에 활용? => 외부에서 생성자를 호출할 때 companion objec를 통해서 호출해야만함

const : read-only, getter 생성 못함
readln() : 반환헝 String? : 입력값 받기
isNullOrBlank() : 빈 값이거나 공백인지 boolean 반환

null : 코틀린에서는 nullable type은 함수를 바로 호출할 수 없다.
    var exNull:String? = null;
    if(exNull.isEmpty()){
        ...
    }
    exNull.isEmpty() 여기서 오류 뜸

?. : safe call operator : nullable 타입이 null이 아닌 경우-
    if(exNull?.isEmpty() === true){
        ...
    }

?: : elvis operator : if 대신에 사용가능
    var name = readLine()?:""
    입력값이 null인 경우 빈 문자열 할당 : js의 ??와 같은 개념

!! : not null assertion : null이 가능한 경우가 존재하더라도 무시

enum : 같은 타입의 여러 상수 정의 가능
    enum class Color{
        RED,
        GREEN,
        BLUE
    }

when is : 타입체크
    when(x){
        is Int -> print(x+1)
        is String -> print(x.length + 1)
        is IntArray -> print(x.sum())
    }

as : type cast : 타입 변경
    var num = 1;
    var text:String = num as String

    // 이러면 에러남 : int를 string으로 변환 불가

as? : 타입변경에 실패하면 null로 할당
    위의 예시를 실행 할 경우 null 할당

객체 : 식별자, 상태, 행동을 가진 실체

Nested class : 클래스 안의 클래스 : 단 부모 클래스의 프로퍼티나 함수 접근 불가
inner class : 클래스 안의 클래스 : 부머 클래스의 프로퍼티나 함수에 접근 가능

확장 함수 : Extension function : class를 상속받지 않아도 기능을 확장 할 수 있음
    fun MutableList<int>.swap(index:Int){
        ...
    }

    // MutableList<int> 타입에서 사용할 수 있는 확장 함수 swap 추가
    var ex = mutableListOf(1,2,3,)
    ex.swap(1)

